---

- name: Validate Hitchhiker Usernames
  assert:
    that:
      - user.username is defined
      - user.username | length > 0
      - (user.username | list) | intersect(invalid_username_characters) | length == 0
    fail_msg: "Invalid username for user {{ user.username | default('NOT DEFINED') }}"
    success_msg: "All usernames are valid"
  loop: "{{ hitchhiker_user_list }}"
  loop_control:
    loop_var: user

- name: Validate Hitchhiker user passwords
  assert:
    that:
      - user.password is defined
      - user.password | length > 0
    fail_msg: "Invalid password for user {{ user.username }}"
    success_msg: "All passwords are valid"
  loop: "{{ hitchhiker_user_list }}"
  loop_control:
    loop_var: user

- name: Validate Hitchhiker Home-Assistant coordinates
  assert:
    that:
      - homeassistant_home_latitude is defined
      - homeassistant_home_latitude >= -90
      - homeassistant_home_latitude <= 90
      - homeassistant_home_longitude is defined
      - homeassistant_home_longitude >= -180
      - homeassistant_home_longitude <= 180
    fail_msg: "Invalid home cordinates, must be (-90..90),(-180..180)"
    success_msg: "Valid home coordinates ({{ homeassistant_home_latitude }},{{ homeassistant_home_longitude }})"

- name: Validate Hitchhiker Home-Assistant elevation
  assert:
    that:
      - homeassistant_home_elevation is defined
      - homeassistant_home_elevation > 0
    fail_msg: "Invalid home elevation {{ homeassistant_home_elevation }}, must be positive"
    success_msg: "Valide home elevation {{ homeassistant_home_elevation }}"

- name: Validate Hitchhiker Home-Assistant unit system
  assert:
    that:
      - homeassistant_unit_system is defined
      - homeassistant_unit_system in homeassistant_valid_unit_systems
    fail_msg: "Invalid unit system {{ homeassistant_unit_system }} specified, must be one of {{ homeassistant_valid_unit_systems | join(', ') }}"
    success_msg: "Valid unit system {{ homeassistant_unit_system }}"

- name: Validate Hitchhiker Home-Assistant log levels
  assert:
    that:
      - log_level.value is in homeassistant_valid_log_levels
      - log_level.key is string
    fail_msg: "Invalid log level, must be one of {{ homeassistant_valid_log_levels | join(', ') }}"
    success_msg: "Valid log level {{ log_level.value }} for {{ log_leve.key }}"
  loop: "{{ homeassistant_log_level_components | default({}) | combine({'default': homeassistant_log_level_default}) | dict2items }}"
  loop_control:
    loop_var: log_level
    label: "{{ log_level.key }}"

- name: Validate Hitchhiker Home-Assistant components are specified
  assert:
    that:
      - hitchhiker_homeassistant_components is defined
      - hitchhiker_homeassistant_components | len > 0
    fail_msg: "You must specify the components to install"
    success_msg: "Components are defined"

- name: Validate Hitchhiker Home-Assistant components are to specification
  assert:
    that:
      - component.src is defined
      - component.src in valid_component_sources
      - component.version is defined
      - component.version | length > 0
      - component.name is defined
      - component.name | lower is match(homeassistant_username_regex)
#      - True if component.src ~= component_source_hacs else (component.repo is match(homeassistant_hacs_repo_regex))
  loop: "{{ hitchhiker_homeassistant_components }}"
  loop_control:
    loop_var: component
